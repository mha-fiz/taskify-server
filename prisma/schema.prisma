
generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Workspace {
  id String @id @default(uuid())
  name String
  userId String
  imageUrl String? @db.Text
  imageId String?
  inviteCode String
  member Members[]
  projects Projects[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}
model Members {
  id String @id @default(uuid())
  userId String
  role Role @default(USER)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  assignedTasks Tasks[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, workspaceId])
}

model Projects {
  id String @id @default(uuid())
  imageUrl String? @db.Text
  imageId String?
  name String

  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  tasks Tasks[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}
model Tasks {
  id String @id @default(uuid())
  name String
  description String?
  dueDate DateTime
  status TaskStatus
  position Int

  projectId String
  project Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId String
  assignee Members @relation(fields: [assigneeId], references: [id], onDelete: Cascade)

  workspaceId String


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId, assigneeId])
  @@index([projectId, status])
  @@index([assigneeId])
}